substitutions:
  # change device name to match your desired name
  device_name: "espresence-occupancy-nightlight-multi-sensor"
  # change sensor name below to the one you want to see in Home Assistant
  device_name_pretty: ESpresence Occupancy Night Light Multi-Sensor
  # change room name below to the one you want to see in Home Assistant
  room: "Bathroom"
  # change the below to be your WiFi SSID
  ssid: !secret wifi_ssid
  # change the below to be your WiFi password
  wifi_password: !secret wifi_password
  # UART Pin configured for a D1 Mini stacked setup
  uart_tx_pin: GPIO21
  # TX Pin configured for a D1 Mini stacked setup
  uart_rx_pin: GPIO22
  # RX Pin configured for a D1 Mini stacked setup
  gpio_pin: GPIO25

# include the yml file with the sensor configuration
packages:
  inclusions: !include packages/leapmmw_sensor.yml

binary_sensor:
  - platform: gpio
    pin:
      number: 33
      mode: INPUT_PULLDOWN
    name: ${room} PIR
    id: pir_motion_sensor
    device_class: motion
    filters:
      - delayed_off: 10s
  - platform: template
    name: ${room} Occupancy
    id: occupancy
    device_class: occupancy
    filters:
      - delayed_off: 15s
    lambda: |-
      if ( id(mmwave_presence_detection).state or id(pir_motion_sensor).state) {
        return true;
      } 
      else if (id(mmwave_presence_detection).state == 0 and id(pir_motion_sensor).state == 0) {
        return false;
      } 
      else {
        return id(occupancy).state;
      }

esphome:
  name: $device_name
  project:
    name: esphome.bluetooth-proxy
    version: "1.0"

esp32:
  board: m5stack-atom
  framework:
    type: esp-idf

# Set flash values storage intervals
preferences:
  flash_write_interval: 60s

# Enable Home Assistant API
api:
  encryption:
    key: "your-key-here"

ota:
  platform: esphome
  password: "your-password-here"

dashboard_import:
  package_import_url: github://esphome/firmware/bluetooth-proxy/esp32-generic.yaml@main

esp32_ble_tracker:
  scan_parameters:
    # We currently use the defaults to ensure Bluetooth
    # can co-exist with WiFi In the future we may be able to
    # enable the built-in coexistence logic in ESP-IDF
    active: true

bluetooth_proxy:
  active: true

# Connect to WiFi & create captive portal and web server
wifi:
  ssid: "${ssid}"
  password: "${wifi_password}"
  # use_address: 192.168.1.34

web_server:
  port: 80
  version: 2
  include_internal: true

light:
  - platform: esp32_rmt_led_strip
    chipset: SK6812
    rgb_order: GRB
    pin: 27
    num_leds: 1
    #rmt_channel: 0
    name: "Atom LED"
